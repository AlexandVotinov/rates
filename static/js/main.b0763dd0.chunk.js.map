{"version":3,"sources":["ApexCharts.js","App.js","serviceWorker.js","index.js"],"names":["ApexCharts","props","updateCharts","bind","state","options","chart","id","xaxis","categories","series","name","data","select","key","this","usdArr","eurArr","rurArr","console","log","newSeries","newCategories","dateList","setState","className","type","width","overlay","onClick","Item","e","preventDefault","DownOutlined","React","Component","dateFormat","date","curr_date","getDate","curr_month","getMonth","getFullYear","a","i","weekAgo","Date","setDate","fetch","api_url","json","unshift","length","Cur_Abbreviation","Cur_OfficialRate","gettingCurrency","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"4RAsFeA,E,kDAxEX,WAAYC,GAAQ,IAAD,8BACf,cAAMA,IAEDC,aAAe,EAAKA,aAAaC,KAAlB,gBAEpB,EAAKC,MAAQ,CACVC,QAAS,CACPC,MAAO,CACLC,GAAI,aAENC,MAAO,CACJC,WAAY,KAGhBC,OAAQ,CACN,CACEC,KAAM,SACNC,KAAM,MAjBC,E,4DAwBI,IACdC,EADOC,EAAM,EAANA,IAEX,OAAQA,GACH,IAAK,MACHD,EAASE,KAAKd,MAAMe,OACpB,MACF,IAAK,MACHH,EAASE,KAAKd,MAAMgB,OACpB,MACF,IAAK,MACHJ,EAASE,KAAKd,MAAMiB,OACpB,MACF,QACEC,QAAQC,IAAI,SAEpB,IAAMC,EAAY,CAAC,CAACT,KAAMC,EAAQF,KAAMG,IAClCQ,EAAgB,CAACd,MAAM,CAACC,WAAYM,KAAKd,MAAMsB,WAErDR,KAAKS,SAAS,CACVd,OAAQW,EACRhB,QAASiB,M,+BAKd,OACI,yBAAKG,UAAU,QACf,kBAAC,IAAD,CACKpB,QAASU,KAAKX,MAAMC,QACpBK,OAAQK,KAAKX,MAAMM,OACnBgB,KAAK,OACLC,MAAM,QAEV,kBAAC,IAAD,CACGC,QACK,kBAAC,IAAD,CAAMC,QAASd,KAAKb,cACpB,kBAAC,IAAK4B,KAAN,CAAWhB,IAAI,OAAf,OACA,kBAAC,IAAKgB,KAAN,CAAWhB,IAAI,OAAf,OACA,kBAAC,IAAKgB,KAAN,CAAWhB,IAAI,OAAf,SAGJ,uBAAGW,UAAU,oBAAoBI,QAAS,SAAAE,GAAC,OAAIA,EAAEC,mBAAjD,yFAAmF,kBAACC,EAAA,EAAD,a,GAlE1EC,IAAMC,WCV3BnB,EAAa,GACbC,EAAa,GACbC,EAAa,GACXK,EAAW,GAEb,SAASa,EAAWC,GAChB,IAAIC,EAAaD,EAAKE,UAClBC,EAAaH,EAAKI,WAAa,EAGnC,OAFiBJ,EAAKK,cAEH,IAAMF,EAAa,IAAMF,E,4CAGpD,oCAAAK,EAAA,sDACgBC,EAAI,EADpB,YACuBA,EAAI,GAD3B,wBAEgBC,EAAU,IAAIC,MACVC,QAAQF,EAAQN,UAAYK,GAHhD,SAIkCI,MAAM,gDAAD,OAAiDZ,EAAWS,GAA5D,mBAJvC,cAIkBI,EAJlB,gBAK+BA,EAAQC,OALvC,OAKkBtC,EALlB,OAMYW,EAAS4B,QAAQf,EAAWS,IAEpBD,EAAI,EARxB,aAQ2BA,EAAIhC,EAAKwC,QARpC,sBAWwBxC,EAAKgC,GAAGS,iBAXhC,OAY2B,QAZ3B,QAe2B,QAf3B,QAkB2B,QAlB3B,gCAawBrC,EAAOmC,QAAQvC,EAAKgC,GAAGU,kBAb/C,oCAgBwBrC,EAAOkC,QAAQvC,EAAKgC,GAAGU,kBAhB/C,oCAmBwBpC,EAAOiC,QAAQvC,EAAKgC,GAAGU,kBAnB/C,6BAsBwBnC,QAAQC,IAAI,SAtBpC,QAQ4CwB,IAR5C,wBAC8BA,IAD9B,4D,0DA+BAW,G,IAaeC,E,uKARP,OACI,6BACI,kBAAC,EAAD,CAAYxC,OAAUA,EAAQC,OAAUA,EAAQC,OAAUA,EAAQK,SAAYA,S,GAL5EW,IAAMC,WCrCJsB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLvD,QAAQuD,MAAMA,EAAMC,a","file":"static/js/main.b0763dd0.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport Chart from 'react-apexcharts';\r\nimport './ApexCharts.css';\r\nimport 'antd/dist/antd.css';\r\nimport { Menu, Dropdown, message } from 'antd';\r\nimport { DownOutlined } from '@ant-design/icons';\r\n\r\nvar selectedCurrency = '';\r\n\r\nconst onClick = ({ key }) => {\r\n  selectedCurrency = key;\r\n};\r\n\r\nclass ApexCharts extends React.Component{\r\n    constructor(props) {\r\n        super(props);\r\n\r\n        this.updateCharts = this.updateCharts.bind(this);\r\n\r\n        this.state = {\r\n           options: {\r\n             chart: {\r\n               id: \"basic-bar\"\r\n             },\r\n             xaxis: {\r\n                categories: []\r\n              }\r\n            },\r\n            series: [\r\n              {\r\n                name: \"series\",\r\n                data: []\r\n              }\r\n             ]\r\n           };\r\n\r\n         }\r\n    \r\n     updateCharts({ key }){\r\n         let select;\r\n         switch (key) {\r\n              case 'USD':\r\n                select = this.props.usdArr;\r\n                break;\r\n              case 'EUR':\r\n                select = this.props.eurArr;\r\n                break;\r\n              case 'RUR':\r\n                select = this.props.rurArr;\r\n                break;\r\n              default:\r\n                console.log('error');\r\n        }      \r\n        const newSeries = [{data: select, name: key}];\r\n        const newCategories = {xaxis:{categories: this.props.dateList}}\r\n         \r\n        this.setState({\r\n            series: newSeries,\r\n            options: newCategories\r\n        });\r\n    };\r\n    \r\n     render() {\r\n       return (\r\n           <div className=\"info\">\r\n           <Chart\r\n                options={this.state.options}\r\n                series={this.state.series}\r\n                type=\"line\"\r\n                width=\"500\"\r\n            />\r\n            <Dropdown \r\n               overlay={\r\n                    <Menu onClick={this.updateCharts}>\r\n                    <Menu.Item key=\"USD\">USD</Menu.Item>\r\n                    <Menu.Item key=\"EUR\">EUR</Menu.Item>\r\n                    <Menu.Item key=\"RUR\">RUR</Menu.Item>\r\n                    </Menu>\r\n                }>    \r\n                <a className=\"ant-dropdown-link\" onClick={e => e.preventDefault()}>Выберите валюту <DownOutlined /></a>\r\n            </Dropdown>\r\n           </div>  \r\n       );\r\n     }\r\n   }     \r\n\r\nexport default ApexCharts","import React from 'react';\nimport ApexCharts from './ApexCharts';\n\nlet usdArr     = [];\nlet eurArr     = [];\nlet rurArr     = [];\nconst dateList = [];\n\n    function dateFormat(date){\n        var curr_date  = date.getDate();\n        var curr_month = date.getMonth() + 1;\n        var curr_year  = date.getFullYear();\n\n        return curr_year + \"-\" + curr_month + \"-\" + curr_date;\n    }\n    \nasync function gettingCurrency(){\n        for(var i = 0; i < 7; i++){\n            var weekAgo = new Date();\n            weekAgo.setDate(weekAgo.getDate() - i);\n            const api_url = await fetch(`https://www.nbrb.by/api/exrates/rates?ondate=${dateFormat(weekAgo)}&periodicity=0`);\n            const data = await api_url.json();\n            dateList.unshift(dateFormat(weekAgo));\n            \n            for(let i = 0; i < data.length; i++){\n                \n                \n                switch (data[i].Cur_Abbreviation) {\n                      case 'USD':\n                        usdArr.unshift(data[i].Cur_OfficialRate);\n                        break;\n                      case 'EUR':\n                        eurArr.unshift(data[i].Cur_OfficialRate);\n                        break;\n                      case 'RUB':\n                        rurArr.unshift(data[i].Cur_OfficialRate);\n                        break;\n                      default:\n                        console.log('error');\n                  }\n                \n                \n            }\n            \n        }\n    }\n\ngettingCurrency();\n\nclass App extends React.Component{\n    \n    render(){\n        return(\n            <div>\n                <ApexCharts usdArr = {usdArr} eurArr = {eurArr} rurArr = {rurArr} dateList = {dateList}/>\n            </div>\n        );\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}